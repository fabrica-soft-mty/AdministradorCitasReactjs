{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actulizarError","actulizarState","e","target","name","value","className","action","onSubmit","preventDefault","trim","console","log","id","uuid","htmlFor","type","placeholder","onChange","Cita","eliminarCita","onClick","propTypes","PropTypes","object","isRequired","func","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bf1b063.chunk.js","sourcesContent":["import React,{Fragment, useState} from 'react'\r\nimport uuid from 'uuid/v4'\r\n\r\nconst Formulario = ({crearCita}) => {\r\n    //crear el State de Citas\r\n    const [cita,actualizarCita] = useState({\r\n        mascota:'',\r\n        propietario:'',\r\n        fecha:'',\r\n        hora:'',\r\n        sintomas:''\r\n\r\n    });\r\n    //Creando un state para los errores\r\n    const [error, actulizarError] = useState(false);\r\n\r\n    //Funcion que se ejecuta cuando escribe en un input\r\n    const actulizarState = e =>{\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]:e.target.value\r\n        });\r\n    }\r\n    //Cuando se envia el formulario\r\n    const submitCita = (e) =>{\r\n        e.preventDefault();\r\n\r\n        //acciones que hacer cuando se envia una cita Validar\r\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\r\n            console.log('hay un error');\r\n            actulizarError(true);\r\n            return;\r\n        }\r\n        //Eliminar el mensaje previo\r\n        actulizarError(false);\r\n        //Asignar ID\r\n        cita.id = uuid();\r\n        \r\n        //Crear la cita\r\n        crearCita(cita);\r\n\r\n        //Reiniciar el Form\r\n        actualizarCita({\r\n        mascota:'',\r\n        propietario:'',\r\n        fecha:'',\r\n        hora:'',\r\n        sintomas:''\r\n        })\r\n\r\n\r\n    }\r\n    //extaraer valoers\r\n    const {mascota,propietario,fecha,hora,sintomas}=cita;\r\n\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n            {error ? <p className=\"alerta-error\">Todos los Campos son obligatorios</p> :null}\r\n            <form\r\n                action=\"\"\r\n                onSubmit={submitCita}\r\n                >\r\n                <label htmlFor=\"\">Nombre Mascota</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={actulizarState}\r\n                    value={mascota}\r\n                />\r\n                <label htmlFor=\"\">Nombre Del Dueño</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Del Dueño\"\r\n                    onChange={actulizarState}\r\n                    value={propietario}\r\n                />\r\n                <label htmlFor=\"\">Fecha</label>\r\n                <input \r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actulizarState}\r\n                    value={fecha}\r\n                />\r\n                <label htmlFor=\"\">Hora</label>\r\n                <input \r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actulizarState}\r\n                    value={hora}\r\n                />\r\n                <label htmlFor=\"\">Síntomas</label>\r\n                <textarea \r\n                name=\"sintomas\" \r\n                className= \"u-full-width\"\r\n                onChange={actulizarState}\r\n                value={sintomas}\r\n                ></textarea>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                    \r\n                >Agregar Cita</button>\r\n            </form>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default Formulario;","import React from 'react'\r\n\r\nconst Cita = ({cita,eliminarCita}) => {\r\n    return ( \r\n        <div className=\"cita\">\r\n            <p>Mascota: <span> {cita.mascota}</span></p>\r\n            <p>Dueño: <span> {cita.propietario}</span></p>\r\n            <p>Fecha: <span> {cita.fecha}</span></p>\r\n            <p>Hora: <span> {cita.hora}</span></p>\r\n            <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n\r\n            <button \r\n                className=\"button eliminar u-full-width\"\r\n                onClick = {() => eliminarCita(cita.id)}\r\n            >Eliminar &times;</button>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Cita;","import React, { Fragment, useState,useEffect } from 'react'\nimport Formulario from './components/Formulario'\nimport Cita from './components/Cita'\nimport PropTypes from 'prop-types';\n\n\nfunction App() {\n  //Citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  //Arreglo de citas\n  const [citas,guardarCitas] = useState([citasIniciales]);\n\n  //USe efect para realizar operaciones cuando el State cambia\n  useEffect( () =>{\n    if(citasIniciales){\n      localStorage.setItem('citas',JSON.stringify(citas));\n    }else{\n      localStorage.setItem('citas',JSON.stringify([]));\n    }\n  },[citas,citasIniciales]);\n\n  //Funcion que modifica las citas toma las actules y agrega la neuva\n  const crearCita = cita =>{\n    guardarCitas([\n      ...citas,\n      cita\n    ]);\n  }\n  //Funcion que elimina una cita por su id\n  const eliminarCita = id =>{\n    const nuevasCitas = citas.filter(cita => cita.id !==id);\n    guardarCitas(nuevasCitas);\n  }\n\n  //Mensaje condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n  \n\n  return (\n    <Fragment>\n    <h1>Administrador de Pacientes</h1>\n    <div className=\"container\">\n        <div className=\"row\">\n            <div className=\"one-half column\">\n                <Formulario\n                  crearCita ={crearCita}\n                />\n            </div>\n            <div className=\"one-half column\">\n                  <h2>{titulo}</h2>\n                  {citas.map(cita =>(\n                    <Cita\n                      key={cita.id}\n                      cita={cita}\n                      eliminarCita={eliminarCita}\n                    />\n                  ))}\n            </div>\n        </div>\n    </div>\n    </Fragment>\n  );\n}\n\nFormulario.propTypes ={\n  crearCita:PropTypes.object.isRequired,\n  eliminarCita: PropTypes.func.isRequired\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}